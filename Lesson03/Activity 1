from keras.models import Sequential 
from keras.layers import Dense, Activation 
from keras.initializers import RandomUniform
import matplotlib.pyplot as plt 
import matplotlib
from utils import load_dataset, plot_decision_boundary

%matplotlib inline 
matplotlib.rcParams['figure.figsize'] = (10.0, 8.0) 

# load dataset
X, Y = load_dataset()
print("X size = ", X.shape)
print("Y size = ", Y.shape)
print("Number of examples = ", X.shape[0])

# set up a seed so that the output matches the solution
my_init = RandomUniform(minval=-0.05, maxval=0.05, seed=1)

# 
input_dim = X.shape[1] 
batch_size = 100

###### Logistic Regression 
model = Sequential()
model.add(Dense(1, activation='sigmoid', input_dim=input_dim, init=my_init)) 
model.compile(optimizer='sgd', loss='binary_crossentropy') 

# train the model for 2000 epoches
nb_epoch = 2000
model.fit(X, Y, batch_size=batch_size, nb_epoch=nb_epoch,verbose=1)

# Plot the decision boundary
plot_decision_boundary(lambda x: model.predict(x), X, Y) 
plt.title("Logistic Regression") 

###### Neural network with hidden layer size = 3
model = Sequential() 
model.add(Dense(3, activation='relu', input_dim=X.shape[1], init=my_init))
model.add(Dense(1, activation='sigmoid', init=my_init))
model.compile(optimizer='sgd', loss='binary_crossentropy') 

# train the model for 6000 epoches
nb_epoch = 6000
model.fit(X, Y, batch_size=batch_size, nb_epoch=nb_epoch,verbose=1) 

# Plot the decision boundary 
plot_decision_boundary(lambda x: model.predict(x), X, Y) 
plt.title("Decision Boundary for Neural Network with hidden layer size 3") 

###### Neural network with hidden layer size = 5
model = Sequential() 
model.add(Dense(5, activation='relu', input_dim=X.shape[1], init=my_init))
model.add(Dense(1, activation='sigmoid', init=my_init)) 
model.compile(optimizer='sgd', loss='binary_crossentropy')

# train the model for 15000 epoches
nb_epoch = 15000
model.fit(X, Y, batch_size=batch_size, nb_epoch=nb_epoch,verbose=1) 

# Plot the decision boundary 
plot_decision_boundary(lambda x: model.predict(x), X, Y) 
plt.title("Decision Boundary for Neural Network with hidden layer size 5") 
